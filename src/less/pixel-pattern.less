/**
 * Generate styles for pixel pattern
 */
.pixel-pattern(@pixels...) {
  .pixel-pattern-util_();

  .set-width(@pixels);
  .set-height(@pixels);

  & .pixel-pattern-pixel{
    .pixel-pattern-pixel-base();

    .for(@pixels); .-each(@pixel) {
      @row: extract(@pixel, 1);
      @col: extract(@pixel, 2);
      @color: extract(@pixel, 3);

      .pixel-pattern-set-pixel(@row, @col, @color);
    }
  }
}

/**
 * Generate styles for pixel pattern created with single pixel
 */
.pixel-pattern-single(@pixel, ...) {
  .pixel-pattern-util_();

  @row: extract(@pixel, 1);
  @col: extract(@pixel, 2);
  @color: extract(@pixel, 3);

  width: @col + 1em;
  height: @row + 1em;

  & .pixel-pattern-pixel {
    .pixel-pattern-pixel-base();
    .pixel-pattern-set-pixel(@row, @col, @color);
  }
}

/**
 * Set style of single pixel
 */
.pixel-pattern-pixel-base() {
  display: block;
  position: absolute;
  width: 1em;
  height: 1em;
}

/**
 * Set color for single pixel
 */
.pixel-pattern-set-pixel(@row, @col, @color) when (@row = 0) and (@col = 0) {
  background-color: @color;
}

.pixel-pattern-set-pixel(@row, @col, @color) when (default()) {
  .box-shadow(@shadow) {
    -webkit-box-shadow+: @shadow;
    -moz-box-shadow+: @shadow;
    box-shadow+: @shadow;
  }

  .box-shadow(@col * 1em @row * 1em @color);
}

/**
 * Set size of single pixel
 */
.pixel-pattern-size(@size){
  font-size: @size;
}

.pixel-pattern-util_(){
  .pixel-pattern-util_for_();
  .pixel-pattern-util_set_width_();
  .pixel-pattern-util_set_height_();
}

//Foreach sugar syntax
//https://github.com/seven-phases-max/less.curious/blob/master/src/for.less
.pixel-pattern-util_for_(){
  .for(@array)   when (default()) {.for-impl_(length(@array))}
  .for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
  .for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}
}

//Set width to max from pixel array
.pixel-pattern-util_set_width_(){
  .set-width(@pixels, @currentWidth, @n) when (@n = 0) {
    width: (@currentWidth + 1) * 1em;
  }

  .set-width(@pixels, @currentWidth: 0, @n:length(@pixels)) when (@n > 0) {
    @pixel: extract(@pixels, @n);

    .set-width-impl_(@pixels, @currentWidth, extract(@pixel, 2), @n);
  }

  .set-width-impl_(@pixels, @w, @newWidth, @n) when (@w >= @newWidth) {
    .set-width(@pixels, @w, @n - 1);
  }

  .set-width-impl_(@pixels, @w, @newWidth, @n) when (@w < @newWidth) {
    .set-width(@pixels, @newWidth, @n - 1);
  }
}

//Set height to max from pixel array
.pixel-pattern-util_set_height_() {
  .set-height(@pixels, @currentHeight, @n) when (@n = 0) {
    height: (@currentHeight + 1) * 1em;
  }

  .set-height(@pixels, @currentHeight: 0, @n:length(@pixels)) when (@n > 0) {
    @pixel: extract(@pixels, @n);

    .set-height-impl_(@pixels, @currentHeight, extract(@pixel, 1), @n);
  }

  .set-height-impl_(@pixels, @w, @newHeight, @n) when (@w >= @newHeight) {
    .set-height(@pixels, @w, @n - 1);
  }

  .set-height-impl_(@pixels, @w, @newHeight, @n) when (@w < @newHeight) {
    .set-height(@pixels, @newHeight, @n - 1);
  }
}
